# Generated by Django 4.2.5 on 2023-10-16 09:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Form_Activite_Phisique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('a_eu_activite_physique', models.BooleanField(default='False')),
                ('duree_activite_physique', models.DurationField()),
                ('description', models.CharField(default=None, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Form_Alimentation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conso_alcool', models.BooleanField(default='False')),
                ('grignotage_sucre', models.BooleanField(default='False')),
                ('grignotage_sale', models.BooleanField(default='False')),
                ('nombre_repas_durant_jr', models.IntegerField(default=2)),
                ('quantite_eau_bu', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantite_alcool_bu', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Form_Autres_Symptomes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presence_dyspnee', models.BooleanField(default='False')),
                ('presence_oedeme', models.BooleanField(default='False')),
                ('presence_episode_intectieux', models.BooleanField(default='False')),
                ('presence_fievre', models.BooleanField(default='False')),
                ('presence_palpitation', models.BooleanField(default='False')),
                ('presence_douleur_thoracique', models.BooleanField(default='False')),
                ('presence_malaise', models.BooleanField(default='False')),
                ('heure_debut_palpitations', models.TimeField(default=None)),
                ('duree_total_palpitations', models.DurationField(default=None)),
                ('heure_debut_douleurs_thoracique', models.TimeField(default=None)),
                ('duree_total_douleurs_thoracique', models.DurationField(default=None)),
                ('heure_debut_malaises', models.TimeField(default=None)),
                ('duree_total_malaises', models.DurationField(default=None)),
            ],
        ),
        migrations.CreateModel(
            name='Form_General',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poids', models.FloatField(default=70.0, validators=[django.core.validators.MinValueValidator(20.0), django.core.validators.MaxValueValidator(300.0)])),
                ('tour_2_taille', models.FloatField(default=80.0, validators=[django.core.validators.MinValueValidator(40.0), django.core.validators.MaxValueValidator(300.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Form_Info_Cardiaque_Tension_Arterielle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frquence_cardiaque', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(20.0), django.core.validators.MaxValueValidator(120.0)])),
                ('tension_systolique_matin', models.FloatField(default=120.0, validators=[django.core.validators.MinValueValidator(100.0), django.core.validators.MaxValueValidator(250.0)])),
                ('tension_systolique_soir', models.FloatField(default=120.0, validators=[django.core.validators.MinValueValidator(100.0), django.core.validators.MaxValueValidator(250.0)])),
                ('tension_diastolique_matin', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(40.0), django.core.validators.MaxValueValidator(100.0)])),
                ('tension_diastolique_soir', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(40.0), django.core.validators.MaxValueValidator(100.0)])),
                ('description', models.CharField(default=None, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Form_Infos_Medicales',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valeur_natremie', models.FloatField(default=140.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('valeur_potatium', models.FloatField(default=4.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('valeur_creatinine', models.FloatField(default=90.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('valeur_clairance_creatinine', models.FloatField(default=90.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_nt_probnp', models.FloatField(default=100.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_fer_serique', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_hemoglobine', models.FloatField(default=14.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('valeur_vitesse_sedimentation', models.FloatField(default=15.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_proteine_c', models.FloatField(default=100.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_troponine', models.FloatField(default=20.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_vitamine_d', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_acide_urique', models.FloatField(default=5.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('taux_inr', models.FloatField(default=2.5, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Form_Prise_Medoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_medoc_pris_jr', models.IntegerField(default=0)),
                ('oublie_prise_medoc_matin', models.BooleanField(default='False')),
                ('oublie_prise_medoc_soir', models.BooleanField(default='False')),
                ('effet_secondaires_remarques', models.BooleanField(default='False')),
                ('symptomes_particuliers_remarques', models.BooleanField(default='False')),
                ('description', models.CharField(default=None, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Formulaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activite_phisique', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_activite_phisique')),
                ('alimentation', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_alimentation')),
                ('autres_symptomes', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_autres_symptomes')),
                ('general', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_general')),
                ('info_cardiaque', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_info_cardiaque_tension_arterielle')),
                ('infos_medicales', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_infos_medicales')),
                ('prise_medoc', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.form_prise_medoc')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Medecin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Symptome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('irratibilite', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('sentiment_depressif', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('bouche_gorge_seche', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('actions_gestes_impulsif', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('grincement_dents', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('difficulte_a_rester_assis', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('cauchemars', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('diarrhee', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('attaques_verbales_envers_qq1', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('haut_bas_emotifs', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
                ('grande_envie_pleurer', models.IntegerField(choices=[(0, 'Ce symptôme n’est pas apparu au cours des deux dernières semaines'), (1, 'Ce symptôme est apparu une ou deux fois seulement au cours des deux dernières semaines'), (5, 'Ce symptôme est apparu plusieurs fois au cours des deux dernières semaines'), (10, 'Ce symptôme est apparu presque continuellement au cours des deux dernières semaines')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formulaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.formulaire')),
                ('symptome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.symptome')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medicin', models.ManyToManyField(to='application.medecin')),
                ('rapport', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='application.rapport')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateField()),
                ('invite_reason', models.CharField(max_length=64)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.group')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='application.person')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(through='application.Membership', to='application.person'),
        ),
    ]
